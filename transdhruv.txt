Speaker A: Hey, Dan. All right, so happy Monday, Sarah. Weekly sync. Ian, you have the first item on the agenda.
Speaker B: Yep.
Speaker C: So I wanted to share with everyone that the survey that I've been working on putting together is going into qualtrics later today. What this means for everyone is that hopefully tomorrow I will have the survey ready and I would really appreciate everyone on the team if you could go through the survey yourself and just kind of record what your experience was like. This is just a chance for me to test out, to make sure the questions make sense, that they are lining up with your expectations as an engineer. And I'm hoping to get that wrapped up so that we can actually share it next week. So that's just a heads up on reviewing it. The other thing I would like to talk about, and maybe we could take this to an async conversation, is more around how do we get this survey out? We need to get a lot of people, a little bit over a thousand, to get a good confidence rate. So that's a lot of people. So trying to figure out creative ways to get more people to take the survey would be really helpful if I can get everyone's insights on that. So just want to give everyone a heads up that's coming. That's going to be this week and next week. So just kind of think on it and we'll touch base from there.
Speaker A: Cool. Is Lori helping? Lori's the researcher. For everyone who doesn't know, is she helping with getting the survey out that they have an existing panel that they could send the survey to?
Speaker C: Yep, they're going to send it to the existing panel. The panel isn't very large, so this is something that we'll probably have to find some other creative ways to get people to take the survey. Whether it's pinging people that are writing on our issues or start sharing it on Twitter, there's a couple different options.
Speaker A: Okay, cool. All right, so the next item I have is reviewing the 12.4 milestone. So I have the link included there to just pull up the issue list. If you want to pull it up. I have it sorted. I know Dan hates when I share my screen, but I have it sorted to manual. If you look in the sort dropdown box, the manual sort will pick up the sort that I included in the board list. So it's in priority order and then we could go through each item there. Sound good? Okay, so the first item on there is the Docker distribution pruner from experimental to GA. This could be an investigation task. This is. Dan and I were talking last week about whether or not we should prioritize forking the docker code and optimizing the garbage collection code that's there, or taking what Camille has already done with this docker distribution. Distribution pruner code, which is working for some customers. Sarah mentioned she's using this for some people on support calls, but it's. I've seen where there's issues with back. It causes issues with backups or some other things where it just doesn't work. But we thought this would be the fastest way to improving the garbage collection story for some of our big customers, some that we met with last week that are having, you know, 55 terabytes of storage that they're using in their registry, and they just can't use the current version of garbage collection. So in this issue, it's. It links to Camille's code, a little bit of the history, but really we need to, like, dive in and investigate and find out if that's possible. And probably a conversation with Camille is worth worthwhile to see what. What he thinks as well.
Speaker D: So sorry to interject, Tim. Yeah. I've been looking through the code and the list of issues. Most of the issues in that project, kind of, at best, a year old. So I think I've been trying to go through those issues to see if there's anything we can sort of start addressing relatively quickly, but we might end up having to. And this is the issues in the. What is it? The package. What if the pruner. Sorry, the container registry pruner. Doctor distribution pruner, or whatever he's called it. So I've been trying to go through these issues to figure out if there's anything that we can actually just kind of go, hey, let's go do this. And it seems like a lot of them is back and forward with people who are trying to contribute. So I think I still need to go through those issues a bit. Maybe Tim and anyone else is interested, we can sort of, like, go through and do a quick scan and see if there's anything sort of low hanging fruit where we can help move that along.
Speaker A: Okay, great. The next item is a net new package manager integration with Nuget. This is one of our. This, I think, is our stage's highest requested feature with something like 127 votes. Now, I've had this. A few customers recently request this as well. I still need to groom this issue, so it's a little out of date, but that's the next item that we need to work on, and I should have that done. This week for sure, but expect it'll look like the Conan MVC issue. Which, by the way, Steve, was anything missing from that that you think that I should focus on? Or was there too much detail in that one that I should exclude from as I build out the Nuget one?
Speaker E: I don't think there's anything in particular one way or the other. Certainly. Like, more information is better, I think. Yeah. Like, as sort of having this top level issue that can eventually be broken down by whoever's working on it as needed. I think that's a good place to start.
Speaker A: Okay, cool.
Speaker D: And Tim, I think the other big lesson that we should take away from how we were working on Conan was that it took a lot of investigation upfront by Krause to get to a point where we could kind of move forward and even start breaking things up. I think we want to. I think you would have done this already, but it's worth mentioning is to say that we should have some sort of investigation effort included upfront so that people have the opportunity to do that. So that would be my main takeaway from how Conan's gone so far.
Speaker A: Yeah, I think we're thinking that anytime we do one of these integrations, it would take two milestones. One for sort of the investigation and getting the API stubbed out, and then the second one for finishing it and testing it and getting it working. That's what Steve and I talked about, at least. So, yeah. Should I create an investigation issue, or should I more say, this is the thing, here's as much detail as we could find, and then just understand that the process will take, the misters that come from the main issue will break that work up.
Speaker D: I think my main takeaway, to just characterize it a little better, or more, depending on how you look at it, is that that investigation would have helped us come to a conclusion about how to deliver an MVC faster. So that's the goal of the investigation, not to fully document all of the possibilities, because that ends up putting us behind a whole set of investigation that, yes, delivers knowledge and helps us understand how to make decisions. And that's awesome. But we should focus that investigation effort on how do we deliver an MVC most minimum viable change that's actually useful in this area from this investigation. Because then we can make sure we're not just sort of researching for a month or whatever. Does that make sense?
Speaker A: It makes sense to me, and I think it's going to be, we're going to be in a lot better place with Nuget than we are with Conan because the documentation is way better and way more thorough, it seems, than nugethen. They actually have some. It's well talked about. It's, it's. I think we're going to be in a much, in a much better place.
Speaker E: But, and I did create, as a side note, it created an issue for kind of just discussing, like when we are implementing new package systems in general, sort of, you know, things we've learned along the way and maybe some notes about how we can break things up in a general sense when we attack each new one. I'll throw a link in here as well.
Speaker A: That would be helpful. Thank you. Are you in the slack chat? In the zoom chat?
Speaker E: I'll just add it to the document.
Speaker A: Okay, cool. Okay, next up we have three, four smallish changes. Not smallish, but the first one is adding sorting for packages, the packages list at the group and project level. Nick said this would probably likely break down into a few or a couple of misters, but basically if you click through the issue, the idea is that on the group list, we're not doing any sorting for the packages list and we can. So I think that's something that Nick's already started to tackle. Actually, the next one on there is checking for Docker images before renaming a group. So if you remember, there's some issue where if you have a bad. If you have a special character in your project group or branch name, it will break the connection to Docker, which is obviously a problem. And we have logic in there. So if you go to change your project name, you'll get a warning and you could see it in the issue. What happens now? You get like a big red banner. It says cannot rename project because it contains registry tags. We should just do the same thing for group. Basically this came from a bug and it's just making a logic change on the front end to make sure we don't let users hang themselves that way.
Speaker E: This might also be able to get easily grouped with. I think there's another issue that's pretty much the same thing, but for NPM and maven packages, because the same thing will happen is if you rename the group or the path to the group, it'll just break the packages, the links to the packages. So I'm assuming, I think I looked into it briefly and it's like all of that code lives in the same spot, so it'd be easy to change.
Speaker A: All of them at the same time. Oh, cool. Do you think I should expand this issue to say, or just create I.
Speaker E: Think there is another issue somewhere that I probably created when working on, I think, the maven side of things. So we could just probably add that to this milestone.
Speaker A: Okay. Can you send that to me and I'll make the update? Yeah.
Speaker D: Yeah. I think you want to prioritize validating the theory that you can change it in one place and then that will impact everything else before we go adding it. Because if we can't, if that's not gonna happen, then when you go to add it and it'll be in the milestone, and you have to do a whole, like, another set of work to solve the problem. So it's probably worth leaving just the one in here, sending it to Tim like you requested, and then if we can get it, or we feel like we have enough capacity to do both, then we would put it in. I don't know what the what's. John, you might be able to speak to the gitlabbiest way to do this, given that you've been here longer than the rest of us.
Speaker A: Yeah.
Speaker B: Thanks, Dan. Yeah, I would say we definitely need to validate the approach. Why don't we? If we let Nick have a little bit of time to research that and just dig in quickly, that seems like probably a good approach before twelve four.
Speaker E: Okay.
Speaker A: Yeah, that's totally fine. I think if we address it first for the doctor images and. Well, I'll include it in the related issues, I think it'll definitely be worthy of a new mister, just based on our team logic. So maybe worthy of a separate issue as well, just in case.
Speaker D: Hash. Ok. Asio.
Speaker A: Ok, so there's that one and then the next one is very small. I was gonna try to do this one myself, just to go through the mister process and feel the pain. But the help link that we have in settings links to the maven repository for packages, it should link to the new combined documentation that we have for the all package registries. So just a small help change in the front end and then I'll go ahead.
Speaker B: Sorry, Tim, did you say you're going to grab that issue?
Speaker A: I think we should give it to Nick. Just so, because if it's on me, then I'm going to be responsible for it. And if I don't get it done, I feel really bad. I think Nick could do it much faster, but I wanted to. I just wanted to show some solidarity.
Speaker D: But thanks for the gitlabby approach to that one, John.
Speaker A: I know. Okay. All right, so three more. I have the authenticate for CI job token for Conan and for NPM. I'm not sure the priority of those. I think we could. I know NPM people are at, customers are asking for. It's definitely a much higher requested feature, but I know once people start using Conan, we'll get it. I guess I would prioritize the NPM one above Conan in this case. And then finally the collecting data and usage measures for our stage, particularly for the container registry. And I think GG's working on that.
Speaker D: Yeah, I would definitely agree that NPM would go above Conan in this case, just because it's a little bit of a pain point. We've also missed it a couple of at least once, so I definitely think that's worthwhile. Switching the order of those two.
Speaker A: Yeah, I just, I just flipped it. I think that's right. I think the Conan one could probably wait till twelve five. Even if we had to, I could leave it in there and if we get to it, great. But if not, it's okay. I think it could wait till the next milestone.
Speaker D: It could, depending on what demand we get for it could also be a really good onboarding issue for the next, uh, team member we have joining in October.
Speaker A: Oh yeah.
Speaker D: Because if it's already well documented what the process is, it means that they can reach out for help and, and so that might be a good one to sort of. To have out there. Um, and I think the threat I'm getting as well from all of the research or all of the research from the research that I've seen that Ian's doing and everyone's contributing to is that people use CI pipelines, the pipelines a lot to interact with this stuff. So I think this is going to be good value generally. So I like that we're sort of prioritizing it. It feels like we had a discussion a little while ago on pricing and what we should have in the free tiers or you know, ce, although that's changing. So I feel like some of these things, it might be worthwhile. I don't know if Tim and Ian, you're sort of thinking in this, in this respect, but it might be worthwhile sort of having a think about whether some of these things are working well together as a, you know, as an enterprise edition or not. If we're adding these to ee and people only really use them for pipelines, but then they can't really do it. I don't know whether it all works that well. You know what I mean?
Speaker A: Well, we will probably. I think the discussion for me should be, should the package registries be an enterprise feature or a consumer feature in my opinion. I think I agree with Jason's point in that issue that they should be a consumer feature, but that issue is still going through discussion and some higher up strategy to figure that stuff out. But in my opinion, I would love it for Dolby consumer.
Speaker D: Yeah, it feels like to me, and I don't want to get too ahead of where we're supposed to be anyway, but to me it feels like they probably should be, even though I might not have felt that way a couple of weeks ago, it feels like they should be consumer and it feels like some things like one of the items we have to discuss in here should be enterprise level, the security scanning stuff for the actual proxy that we have coming up. I'm good.
Speaker A: Yeah, I think that's right. That's 12.4. Still working on the Nuget issue and I'll make some changes this week based on some of the conversations that we had. But any general questions or concerns?
Speaker B: I had one quick question about the Nuget, the.net package manager. I quickly scanned the issue and I'll do a little more due diligence. But is anybody aware that that will need some front end effort or do we think that's mostly back in focus right now?
Speaker A: The first milestone like this milestone will probably be the investigation and the APIs and then the next milestone it'll be front end, but it'll definitely, it'll probably be very close to the same front end that we have for NPM and Maven. Yeah, just different metadata that fits into those columns. Conan was a little bit different because we had expandable settings piece. I don't think Nuget will have that. It seems like they don't. It doesn't carry as much of that metadata, but I'll know more in the next couple of days. As I. As I look at it, I've just been struggling to get it running on my computer because it's. I have a Mac and not a windows machine and so I'm just working through some of those kinks they have. They have something you could use called soul or something. I forget what it's called called, but I just wanted to make sure. I've just been struggling with it.
Speaker D: Yeah.
Speaker A: Okay.
Speaker B: Just wanted to confirm. Thanks, Tim.
Speaker A: No problem.
Speaker B: And when you're on your Mac, are you using the. I haven't been in.net in a little bit of time now, but when I. My previous role, we were moving everything to.net core so we can run on Mac OS and Linux and things like that. Does that help in the situation at all?
Speaker A: Yeah, they have something. Have another download that you have to do use it. And then you could use it from visual studio or you could use it from the command line. I think we want to just cover the command line use case in this case. But yeah, we do have to decide between core and standard. I think I forget which one we should lean toward. Whichever one is the more widely accepted now we should use. Yeah, and they have two different core and they have two different files for the metadata. They have like package config and then they have another one that's called something strange. And then the stranger one is the newer one.
Speaker D: It's package something strange, apparently.
Speaker B: Yeah, that's definitely the name.
Speaker A: Package strange. Yeah, that's it.
Speaker B: All right, thanks, Tim. Appreciate it.
Speaker A: No problem. Okay. Yeah, so like Dan mentioned, the next one on there is the dependency firewall, which is a net new category that came up from a conversation with Sid and Kenny where they were talking about us doing something like this and building off of the dependency proxy to build in some additional security features. The, you know, JFrog has their x ray product and sonotype has a firewall product. Everybody's incorporating this stuff. You know, NPM Enterprise is trying to build their whole value chain off of security scanning. So it seems like something that we should do. I created a new category and some content for the strategy and direction page along with some skeleton issues that we could review. But I just wanted to make sure everybody was aware of it and had the chance to, in the issue provide any feedback or thoughts before it got merged or if you had any questions, I'd be happy to answer what I can, even though knowing it's not. We're not going to get to this until 2020.
Speaker D: What did we decide on dependency firewall already as the name?
Speaker A: That's what Sid should suggested. Originally they had artifact analysis, but he left a comment in there saying that didn't quite make sense because they're not artifacts, they're dependencies.
Speaker D: And someone mentioned that there was a duplication of the use of the word artifact, you know?
Speaker A: Yeah, and it's nothing. It's not quite right, I guess, naming wise. So we ended up at Dependency firewall. We could always change it if we had a good justification. I like it because it helps brand that section. Like if we're talking about making dependency proxy and dependency firewall the enterprise features and features that you pay for, I think it helps brand them and it says exactly what it's doing, which I think is also the GitLab way. So I thought Sid did a good job with naming it. But yeah, if you have other ideas, I'm sure we could talk about it.
Speaker D: Yeah, I don't think I have other ideas right now that aren't just dumb jokes, so I'm going to leave them out. But what I am looking at here is, I think there's a couple of things. One, we ought to be really careful that we're trying to leverage the security team's work as much as possible here. I don't want to be recreating the wheel. Ideally in my head, we, as a package, gets loaded into the proxy, it's scanned by those same sets of tools, if possible, because trying to maintain some understanding of how this stuff fits together is going to be a lot of a big lift for a small team like us. And none of that makes sense. Right, sorry. That was a very dismissive way to put it. If it doesn't make sense, then I'm happy to hear arguments. Otherwise. Sorry. And I think the thing I was going to say is I think we ought to be discussing the comments that have been raised around the dependency proxy, that I can just add a flag to the docker distribution registry to run it in proxy mode. And what the dependency proxy does that's different from that, because I've seen that come up from end users, from our customers. And so I, like, I couldn't answer that question. How is it different from just running VDR in proxy mode? I don't know.
Speaker A: Yeah, we think we need to investigate that probably.
Speaker D: Yeah. So do you want me to add an issue to investigate or do you want to add that issue or. It doesn't have to be in here, but we should. I think we ought to be discussing this before it sort of testing a bunch of effort in dependency proxy just to make sure we're clear on what we should be providing. And our intention is to provide further support for proxying in the dependency proxy, for other stuff other than docker distribution registry or aka the container registry. So this isn't just the. Oh, well, okay, we don't need it. It's more like, okay, well, how does, how do we differentiate it? How is it valuable? What does it actually do for us? Does that make sense?
Speaker A: That'd be great. If you could open that issue, that would be very helpful.
Speaker D: I will find a place to add that issue. Cool. All right, sweet.
Speaker A: All right, what else we have on the agenda? Oh, thank you for my haircut. I really appreciate it. I got it done yesterday. I'll call that. I'll call myself out. Thank you. Feeling sharp.
Speaker D: Nice, man. That's awesome. And then the last call out here, just to stand up a little bit. Steve.
Speaker A: I like that shirt. It's cute.
Speaker D: Nice.
Speaker B: Very cool.
Speaker D: That's all I got.
Speaker A: All right, well, have a great week, and I'll talk to everyone throughout the week. Let me know if you need anything. And like I said, I'll make sure I follow up on these comments here. Okay, stop recording.
